/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.76
 * Generated at: 2022-03-09 23:58:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.text.Normalizer.Form;
import data.*;
import entities.*;
import java.util.LinkedList;

public final class registrarLugarRobo_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("data");
    _jspx_imports_packages.add("entities");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.LinkedList");
    _jspx_imports_classes.add("java.text.Normalizer.Form");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<title>[PSG] Registrar lugar Robo</title>\r\n");
      out.write("<script src = \"jquery-3.6.0,js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
 
		DataLugarRobo dlr = new  DataLugarRobo();
		LinkedList<LugarRobo> lugares = dlr.getAll();
		LugarRobo lr =  new LugarRobo();
		int idLR;
	  	DataIntegrante di = new  DataIntegrante();
    	LinkedList<Integrante> lista = di.getAll();
	
      out.write("\r\n");
      out.write("		\r\n");
      out.write("<form action=\"registrarLugarRoboS?sizeLista=");
      out.print(lista.size());
      out.write("\" method=\"post\"> \r\n");
      out.write("	\r\n");
      out.write("	Seleccione Lugar de robo:\r\n");
      out.write("	 <select name=\"lugarRobo\" > \r\n");
      out.write("	 \r\n");
      out.write("		");

			for(LugarRobo i : lugares) {
		
      out.write("		\r\n");
      out.write("			    <option value=\"");
      out.print(i.getIdLugarRobo());
      out.write("\"> <!-- No logro conservar la id fuera del for-->\r\n");
      out.write("					");
 out.print(i.getLugarRobo()); 
      out.write("\r\n");
      out.write("			    </option>\r\n");
      out.write("	    ");

			}
			lr = dlr.getById(i.getIdLugarRobo);
		
      out.write("\r\n");
      out.write("	</select><br><br>\r\n");
      out.write("	\r\n");
      out.write("  	");

  		out.print("Seleccione participantes Max: NI IDEA COMO TRAER EL MAXIMO DE CADA LUGAR ROBO");	
	
      out.write("\r\n");
      out.write("	<div class = \"container\">\r\n");
      out.write("		<form class = \"MaxMin\">\r\n");
      out.write("			<p>\r\n");
      out.write("				Maximo de integrantes:\r\n");
      out.write("									");

										out.print(lr.getMaxIntegrantes());
									
      out.write("\r\n");
      out.write("				Minimo de integrantes:\r\n");
      out.write("									");

										out.print(lr.getMinIntegrantes());
									
      out.write("\r\n");
      out.write("		</form>\r\n");
      out.write("		<button id=\"botonEleccion\" onclick=\"ShowHideElement()\">Mostrar Max/Min</button>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<br>\r\n");
      out.write("	\r\n");
      out.write("	");

	for(int c=0; c<=2; c++) { // repite el combo box, lo deberia hacer en base a la cantidad integrantes q participaron
	
      out.write("<br>\r\n");
      out.write("		 <select name=\"lugarRobo");
      out.print(c);
      out.write(">\">  \r\n");
      out.write("			");

		  		for(Integrante i :  lista) {	
			
      out.write("\r\n");
      out.write("			    <option value=\"");
 i.getIdIntegrante(); 
      out.write("\"> \r\n");
      out.write("					");
 out.print(i.getNombre() + "" + i.getApellido()); 
      out.write("\r\n");
      out.write("	   			 </option>\r\n");
      out.write("	    	");

					}
			
      out.write("\r\n");
      out.write("		</select><br>\r\n");
      out.write("   	");

		}
	
      out.write("\r\n");
      out.write("		<br>\r\n");
      out.write("		Ingrese Resultado:\r\n");
      out.write("		<select name=\"rto\">\r\n");
      out.write("			<option value=\"Ganado\">Ganado</option>\r\n");
      out.write("			<option value=\"Perdido\">Perdido</option>\r\n");
      out.write("			<option value=\"Empatado\">Empatado</option>\r\n");
      out.write("		</select>\r\n");
      out.write("		<br>\r\n");
      out.write("		\r\n");
      out.write("		<input type = \"submit\" value = \"Guardar\" Required><br>\r\n");
      out.write("	</form>\r\n");
      out.write("	\r\n");
      out.write("<!--  Scripts -->\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("	\r\n");
      out.write("		$(\".myForm\").hide();\r\n");
      out.write("		\r\n");
      out.write("		function ShowHideElement(){\r\n");
      out.write("			let text = \"\";\r\n");
      out.write("			\r\n");
      out.write("			if($(\"#MaxMin\").text() === \"Mostrar Max/Min\"){\r\n");
      out.write("				$(\".myForm\").show();\r\n");
      out.write("			}else{\r\n");
      out.write("				$(\".myForm\").hide();\r\n");
      out.write("				text = \"Mostrar Max/Min\";\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			$(\"#MaxMin\").html();\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
